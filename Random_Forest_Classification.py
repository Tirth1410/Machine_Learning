# -*- coding: utf-8 -*-
"""Random_Forest_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugvSZTncOAQz_HOPuK-Rdu0mLWYBeMv6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot  as plt

data = pd.read_csv('Social_Network_Ads.csv', header='infer')
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

#Splitting tha data set using train_test_split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
print(X_train)
print('---------------------------------------------------')
print(X_test)
print('---------------------------------------------------')
print(y_train)
print('---------------------------------------------------')
print(y_test)

#Feature Scaling of the data
from sklearn.preprocessing import  StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print('----------------------------------------------------------')
print(X_test)

#Random Forest from sklearn
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state=0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

print(y_pred)

#Side by side comparig y_pred and y_test
print(np.concatenate((y_test.reshape(len(y_test), 1), y_pred.reshape(len(y_pred), 1)), 1))

#Confusion Matrix and Accuracy Score
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
print(accuracy_score(y_test, y_pred)*100, '%')

