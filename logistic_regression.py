# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8IxVcUinHOC8RpbeBSZ5GmTDkOnoqff
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = pd.read_csv('Social_Network_Ads.csv', header='infer')
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

#Splitting the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
print(X_train)
print('------------------------------------')
print(X_test)
print('------------------------------------')
print(y_train)
print('------------------------------------')
print(y_test)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Training on X_train
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train, y_train) #(Independent Variable, Dependent Variable)

#Predicting for single data
classifier.predict([[30, 87000]])

#Predicting result for X_test
y_pred = classifier.predict(X_test)
print(y_pred)

#Concatenating y_pred and y_test
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)),1))

#Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_pred, y_test)
cm

#Accuracy of the prediction
from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred) #(Original , Predicted)

#Visualization of Trian set data